import pefile
import sys
import re

def malware_analyze(file_path):
    try:
        pe=pefile.PE(file_path)
    except pefile.PEFormatError:
        print("Error: File is not a  valid PE file")
        sys.exit(1)

    #check if file is packed or obfuscated
    packers = ['UPX', 'FSG', 'Themida', 'MPRESS', 'ASPack', 'PECompact', 'PELock', 'Enigma']
    obfuscators = ['VMProtect', 'Themida', 'MPRESS', 'ASPack', 'PECompact', 'PELock', 'Enigma']

    print("Checking for packers and obfuscators...")
    for ent in pe.DIRECTORY_ENTRY_IMPORT:
        dll_name = ent.dll.decode('utf-8')
        if any(packer in dll_name for packer in packers):
            print("Found Packer: ", dll_name)
        for imp in ent.imports:
            func_name = imp.name.decode('utf-8')
            if any(obfuscator in func_name for obfuscator in obfuscators):
                print("Found Obfuscator: ", func_name)

    #Detect malicious import and exports
    malicious_imports = ['CreateThread', 'CreateRemoteThread', 'CreateProcess', 'ShellExecute', 'WinExec', 'URLDownloadToFile']
    malicious_exports = ['StartService', 'StopService', 'StartServiceCtrlDispatcher', 'InstallService', 'UninstallService', 'LoadLibrary', 'GetProcAddress']

    print("\nChecking for malicious imports and exports:")
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        for imp in entry.imports:
            func_name = imp.name.decode('utf-8')
            if any(mal_imp in func_name for mal_imp in malicious_imports):
                print(f"  Found malicious import: {func_name}")
    for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
        exp_name = exp.name.decode('utf-8')
        if any(mal_exp in exp_name for mal_exp in malicious_exports):
            print(f"  Found malicious export: {exp_name}")

    # Extract and analyze strings
    print("\nExtracting and analyzing strings:")
    strings = []
    for section in pe.sections:
        data = section.get_data()
        strings.extend(re.findall(b'[\x20-\x7e]{4,}', data))


    for string in strings:
        decoded_string = string.decode('utf-8')
        if re.match(r'^https?://', decoded_string, re.IGNORECASE):
            print(f"  Found URL: {decoded_string}")
        elif re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', decoded_string):
            print(f"  Found IP address: {decoded_string}")
        elif re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', decoded_string):
            print(f"  Found email: {decoded_string}")
        elif re.match(r'^[a-zA-Z0-9]{32}$', decoded_string):
            print(f"  Found MD5 hash: {decoded_string}")
        elif re.match(r'^[a-zA-Z0-9]{40}$', decoded_string):
            print(f"  Found SHA-1 hash: {decoded_string}")
        elif re.match(r'^[a-zA-Z0-9]{64}$', decoded_string):
            print(f"  Found SHA-256 hash: {decoded_string}")
        elif re.match(r'^[a-zA-Z0-9]{128}$', decoded_string):
            print(f"  Found SHA-512 hash: {decoded_string}")

    # Check for file signatures
    file_signatures = {
        'UPX': b'UPX0',
        'FSG': b'FSG1',
        'Themida': b'TMDR',
        'MPRESS': b'MPRE',
        'ASPack': b'ASPK',
        'PECompact': b'PECO',
        'PELock': b'PLOCK',
        'Enigma': b'ENIG'
    }

    print("\nChecking for file signatures:")
    with open(file_path, 'rb') as file:
        file_data = file.read()
        for signature_name, signature in file_signatures.items():
            if signature in file_data:
                print(f"  Found file signature: {signature_name}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python malware.py <file_path>")
        sys.exit(1)


    file_path = sys.argv[1]
    malware_analyze(file_path)
